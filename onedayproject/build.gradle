import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.application'

def RELEASE_APK_NAME = "OneDay"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.oneday.videodemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        ndk{
//            abiFilters 'x86', 'x86_64', 'armeabi-v7a',
//                    'arm64-v8a'
//        }
    }

    dataBinding{
        enabled = true
    }

    //可以添加自定义版本 构建类型
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

//        debug {
//
//        }

        //自定义版本类型，通过initwith方法来初始化staging版本，并复制一个已存在的构建类型的所有属性到新构建类型上
//        staging.initWith(buildTypes.debug)
//        staging {
//            //applicationId后缀(suffix-后缀)
//            applicationIdSuffix rootProject.ext.applicationIdSuffix
//            versionNameSuffix rootProject.ext.applicationIdSuffix
//            debuggable false
//        }

    }
    //签名文件配置
    signingConfigs {
        //可以有多个签名文件
        //xxxx1 rootProject.ext.signingCfgRk2928
        //xxxx2 rootProject.ext.signingCfgRk2928
    }
    //维度,顺序很重要
    flavorDimensions "color", "price"
    //该属性用来生成不同版本的程序(配置不同的签名等)
    //构建variant = 构建类型(release/debug) + product flavor(管理多个应用和依赖库)
    productFlavors{
        red{
            flavorDimensions "color"
        }

        blue{
            flavorDimensions "color"
        }

//        free{
//            flavorDimensions "price"
//        }
//
//        pay{
//            flavorDimensions "price"
//        }
    }
    //如果工程新建时就支持c++,就用如下配置
//    externalNativeBuild {
//        cmake {
//            // Passes optional arguments to CMake.
//            arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"
//            // Sets optional flags for the C compiler.
//            cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"
//            // Sets a flag to enable format macro constants for the C++ compiler.
//            cppFlags "-D__STDC_FORMAT_MACROS"
//            //生成.so库的目标平台
//            abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a',
//                    'arm64-v8a'
//        }
//    }

    externalNativeBuild{
//        cmake{
//            path("CMakeLists.txt")
//        }
        ndkBuild{
            path 'src/main/jni/Android.mk'
        }
    }
    //配置源码路径
    sourceSets.main{
        //jniLibs.srcDir = 'src/main/jniLibs'
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    applicationVariants.all { variant ->
        def name = variant.buildType.name
        println "###############name :" + name

        if (name.contains(BuilderConstants.DEBUG)) {
            println "############it`s debug mode"
            return
        }

        def time = rootProject.ext.buildTimeForFileName
        def apkVersionName = rootProject.ext.getResStringValue(
                new File(variant.sourceSets[0].resDirectories[0],
                        "/values/strings.xml"),
                "app_name")
        def apk = "${RELEASE_APK_NAME}" +
                "_${variant.flavorName.capitalize()}" +
                (rootProject.ext.RELEASE_APK_SUFFIX_VERSION_NAME ? "_${apkVersionName}" : "") +
                (rootProject.ext.RELEASE_APK_SUFFIX_TIMESTAMP ? "_${time}" : "")
        def apkDestinationPath = "release/${variant.flavorName}/${apkVersionName}/"

        println "apkDestinationPath :" + apkDestinationPath

        variant.outputs.all { output ->
            outputFileName = new File(
                    "./../../../../../../../${apkDestinationPath}",
                    "${apk}.apk")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.support:appcompat-v7:29.0.2'
    implementation 'com.android.support:support-v4:29.0.2'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //recyclerview
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    // For control over item selection of both touch and mouse driven selection
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0-rc01"
    implementation 'org.jetbrains:annotations-java5:15.0'
    implementation 'com.google.android.material:material:1.1.0'

    //noinspection GradleCompatible
    implementation 'com.android.support:design:25.3.1'
}

task printProperies{
    println rootProject.ext.testExtendedProperies
    println propertiesFile
    if (project.hasProperty("cmd")){
        println cmd
    }
}
